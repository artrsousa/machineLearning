%{ 
    Discriminant type {linear, diaglinear, pseudolinear, ... 
                        quadratic, diagquadratic, pseudoquadratic} 
%}

function [trainedClassifier, validationAccuracy] = disclassifier(trainingData)
    inputTable = trainingData;
    predictorNames = {'Var1', 'Var2'};
    predictors = inputTable(:, predictorNames);
    response = inputTable.Var7;
    isCategoricalPredictor = [false, false];

    % Train a classifier
    classificationDiscriminant = fitcdiscr(...
        predictors, ...
        response, ...
        'DiscrimType', 'linear', ...
        'Gamma', 0, ...
        'Delta', 0, ...
        'FillCoeffs', 'off', ...
        'ClassNames', {'Hernia'; 'Normal'; 'Spondylolisthesis'}, ...
        'Prior', 'empirical', ...
        'ScoreTransform', 'none', ...
        'OptimizeHyperparameters', 'none');

    % Create the result struct with predict function
    predictorExtractionFcn = @(t) t(:, predictorNames);
    discriminantPredictFcn = @(x) predict(classificationDiscriminant, x);
    trainedClassifier.predictFcn = @(x) discriminantPredictFcn(predictorExtractionFcn(x));

    % Add additional fields to the result struct
    trainedClassifier.RequiredVariables = {'Var1', 'Var2'};
    trainedClassifier.ClassificationDiscriminant = classificationDiscriminant;
    trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2019a.';
    trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

    % Perform cross-validation
    partitionedModel = crossval(trainedClassifier.ClassificationDiscriminant, 'KFold', 5);

    % Compute validation predictions
    [validationPredictions, validationScores] = kfoldPredict(partitionedModel);

    % Compute validation accuracy
    validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
end