function classifier = svmc(predictors, response, train_id, test_id)
    %% SVM - Linear Kernel
    fprintf('\n\nSupport Vector Machine Classifier - Linear\n');
    template = templateSVM(...
        'KernelFunction', 'linear', ...
        'PolynomialOrder', []);
    
    classifier = fitcecoc(...
        predictors(train_id,:), ...
        response(train_id), ...
        'ClassNames', unique(response(train_id)), ...
        'Learners', template, ...
        'OptimizeHyperparameters', {'Standardize','KernelScale','BoxConstraint'}, ...
        'HyperparameterOptimizationOptions', struct('Holdout',0.3, ...
        'AcquisitionFunctionName', 'expected-improvement-plus', ...
        'ShowPlots', false, ...
        'Verbose', 0));
        
    fprintf('Min Objective: %s\n', num2str(classifier.HyperparameterOptimizationResults.MinObjective));
    [label,~,~] = predict(classifier,predictors(test_id,:));
    total = cellfun(@strcmp, response(test_id), label);
    hits = total(total==1);
    accuracy = size(hits,1)/size(total,1);
    fprintf('Accuracy in test data: %s%%\n', num2str(accuracy*100));
    disp(classifier.ModelParameters.BinaryLearners);
    
    %% SVM - Polynomial Kernel
    fprintf('\n\nSupport Vector Machine Classifier - Polynomial\n');    
    template = templateSVM(...
    'KernelFunction', 'polynomial');
    
    classifier = fitcecoc(...
        predictors(train_id,:), ...
        response(train_id), ...
        'ClassNames', unique(response(train_id)), ...
        'Learners', template, ...
        'OptimizeHyperparameters', {'Standardize','KernelScale','BoxConstraint','PolynomialOrder'}, ...
        'HyperparameterOptimizationOptions', struct('Holdout',0.3, ...
        'AcquisitionFunctionName', 'expected-improvement-plus', ...
        'ShowPlots', false, ...
        'Verbose', 0));
        
    fprintf('Min Objective: %s\n', num2str(classifier.HyperparameterOptimizationResults.MinObjective));
    [label,~,~] = predict(classifier,predictors(test_id,:));
    total = cellfun(@strcmp, response(test_id), label);
    hits = total(total==1);
    accuracy = size(hits,1)/size(total,1);
    fprintf('Accuracy in test data: %s%%\n', num2str(accuracy*100));
    disp(classifier.ModelParameters.BinaryLearners);
     
    %% SVM - Gaussian Kernel
    fprintf('\n\nSupport Vector Machine Classifier - Gaussian\n');        
    template = templateSVM(...
    'KernelFunction', 'gaussian', ...
    'PolynomialOrder', []);
    
    classifier = fitcecoc(...
        predictors(train_id,:), ...
        response(train_id), ...
        'ClassNames', unique(response(train_id)), ...
        'Learners', template, ...
        'OptimizeHyperparameters', {'Standardize','KernelScale','BoxConstraint'}, ...
        'HyperparameterOptimizationOptions', struct('Holdout',0.3, ...
        'AcquisitionFunctionName', 'expected-improvement-plus', ...
        'ShowPlots', false, ...
        'Verbose', 0));
        
    fprintf('Min Objective: %s\n', num2str(classifier.HyperparameterOptimizationResults.MinObjective));
    [label,~,~] = predict(classifier,predictors(test_id,:));
    total = cellfun(@strcmp, response(test_id), label);
    hits = total(total==1);
    accuracy = size(hits,1)/size(total,1);
    fprintf('Accuracy in test data: %s%%\n', num2str(accuracy*100));
    disp(classifier.ModelParameters.BinaryLearners);
end