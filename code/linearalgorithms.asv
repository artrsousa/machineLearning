function kmeans_example(X, n)
    %{
    opts = statset('Display','iter');
    [idx,C] = kmeans(X,n,'Distance','cityblock',...
        'Replicates',5,'Options',opts);

    figure();

    plot(X(idx==1,1),X(idx==1,2),'r.','MarkerSize',12)

    hold on
    plot(X(idx==2,1),X(idx==2,2),'b.','MarkerSize',12)
    plot(X(idx==3,1),X(idx==3,2),'g.','MarkerSize',12)

    plot(C(:,1),C(:,2),'kx',...
         'MarkerSize',10,'LineWidth',2) 

    legend('Cluster 1','Cluster 2', 'Cluster 3','Centroids',...
           'Location','NW')
    title 'Cluster Assignments and Centroids'
    hold off
    %}
end

function [trainedClassifier, validationAccuracy] = discriminantClassifier(trainingData)
    inputTable = trainingData;
    predictorNames = {'Var1', 'Var2'};
    predictors = inputTable(:, predictorNames);
    response = inputTable.Var7;
    isCategoricalPredictor = [false, false];

    % Train a classifier
    % This code specifies all the classifier options and trains the classifier.
    classificationDiscriminant = fitcdiscr(...
        predictors, ...
        response, ...
        'DiscrimType', 'linear', ...
        'Gamma', 0, ...
        'FillCoeffs', 'off', ...
        'ClassNames', {'Hernia'; 'Normal'; 'Spondylolisthesis'});

    % Create the result struct with predict function
    predictorExtractionFcn = @(t) t(:, predictorNames);
    discriminantPredictFcn = @(x) predict(classificationDiscriminant, x);
    trainedClassifier.predictFcn = @(x) discriminantPredictFcn(predictorExtractionFcn(x));

    % Add additional fields to the result struct
    trainedClassifier.RequiredVariables = {'Var1', 'Var2'};
    trainedClassifier.ClassificationDiscriminant = classificationDiscriminant;
    trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2019a.';
    trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

    % Extract predictors and response
    % This code processes the data into the right shape for training the
    % model.
    inputTable = trainingData;
    predictorNames = {'Var1', 'Var2'};
    predictors = inputTable(:, predictorNames);
    response = inputTable.Var7;
    isCategoricalPredictor = [false, false];

    % Perform cross-validation
    partitionedModel = crossval(trainedClassifier.ClassificationDiscriminant, 'KFold', 5);

    % Compute validation predictions
    [validationPredictions, validationScores] = kfoldPredict(partitionedModel);

    % Compute validation accuracy
    validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
end