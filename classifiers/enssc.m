function classifier = enssc(predictors, response, train_id, test_id, file)
    load(file,'results');
    
    fprintf('\n\nEnssembles: Tree Classifier\n');
    template = templateTree(); 
    classifier = fitcensemble(...
        predictors(train_id,:), ...
        response(train_id), ...
        'Learners', template, ...
        'ClassNames', unique(response(train_id)), ...
        'OptimizeHyperparameters', 'all', ...
        'HyperparameterOptimizationOptions', struct('Holdout',0.3, ...
        'AcquisitionFunctionName', 'expected-improvement-plus', ...
        'UseParallel', false, ...
        'ShowPlots', false, ...
        'Verbose', 0));
        
    fprintf('Min Objective: %s\n', num2str(classifier.HyperparameterOptimizationResults.MinObjective));
    [label,~] = predict(classifier,predictors(test_id,:));
    total = cellfun(@strcmp, response(test_id), label);
    hits = total(total==1);
    accuracy = size(hits,1)/size(total,1);
    fprintf('Accuracy in test data: %s%%\n', num2str(accuracy*100));
    disp(classifier.ModelParameters);
    
    %   Save results
    row = size(results,1)+1;
    results{row,1} = classifier;
    results{row,2} = accuracy*100;
    save(file,'results');
    
    fprintf('\n\nEnssembles: KNN Classifier - Optimize All HyperParameters\n');
    template = templateKNN(...
        'NSMethod','kdtree');
    
    subspaceDimension = max(1, min(3, width(predictors(train_id,:)) - 1));
    classifier = fitcensemble(...
        predictors(train_id,:), ...
        response(train_id), ...
        'Learners', template, ...
        'Method', 'Subspace', ...
        'NPredToSample', subspaceDimension, ...
        'ClassNames', unique(response(train_id)), ...
        'OptimizeHyperparameters', {'NumLearningCycles','NumNeighbors','Distance','DistanceWeight','Exponent','Standardize'}, ...
        'HyperparameterOptimizationOptions', struct('Holdout',0.3, ...
        'UseParallel', false, ...
        'ShowPlots', false, ...
        'Verbose', 0));
        
    fprintf('Min Objective: %s\n', num2str(classifier.HyperparameterOptimizationResults.MinObjective));
    [label,~] = predict(classifier,predictors(test_id,:));
    total = cellfun(@strcmp, response(test_id), label);
    hits = total(total==1);
    accuracy = size(hits,1)/size(total,1);
    fprintf('Accuracy in test data: %s%%\n', num2str(accuracy*100));
    disp(classifier.ModelParameters);
    
    %   Save results
    row = size(results,1)+1;
    results{row,1} = classifier;
    results{row,2} = accuracy*100;
    save(file,'results');
   
    disp('Enssembles: KNN Classifier - Optimize Minkowski Distance Exponent');

    template = templateKNN(...
        'Distance', 'minkowski',...
        'NSMethod', 'kdtree');
    
    subspaceDimension = max(1, min(3, width(predictors(train_id,:)) - 1));
    classifier = fitcensemble(...
        predictors(train_id,:), ...
        response(train_id), ...
        'Learners', template, ...
        'Method', 'Subspace', ...
        'NPredToSample', subspaceDimension, ...
        'ClassNames', unique(response(train_id)), ...
        'OptimizeHyperparameters', {'NumLearningCycles','NumNeighbors','DistanceWeight','Exponent','Standardize'}, ...
        'HyperparameterOptimizationOptions', struct('Holdout',0.3, ...
        'UseParallel', true, ...
        'ShowPlots', false, ...
        'Verbose', 0));
        
    fprintf('Min Objective: %s\n', num2str(classifier.HyperparameterOptimizationResults.MinObjective));    
    [label,~] = predict(classifier,predictors(test_id,:));
    total = cellfun(@strcmp, response(test_id), label);
    hits = total(total==1);
    accuracy = size(hits,1)/size(total,1);
    fprintf('Accuracy in test data: %s%%\n', num2str(accuracy*100));
    disp(classifier.ModelParameters);

    %   Save results
    row = size(results,1)+1;
    results{row,1} = classifier;
    results{row,2} = accuracy*100;
    save(file,'results');
    
    disp('Enssembles: Discriminant Classifier');

    template = templateDiscriminant();
    subspaceDimension = max(1, min(3, width(predictors(train_id,:)) - 1));
    classifier = fitcensemble(...
        predictors(train_id,:), ...
        response(train_id), ...
        'Learners', template, ...
        'Method', 'Subspace', ...
        'NPredToSample', subspaceDimension, ...
        'ClassNames', unique(response(train_id)), ...
        'OptimizeHyperparameters', {'NumLearningCycles','Delta','DiscrimType','Gamma'}, ...
        'HyperparameterOptimizationOptions', struct('Holdout',0.3, ...
        'UseParallel', true, ...
        'ShowPlots', false, ...
        'Verbose', 0));
        
    fprintf('Min Objective: %s\n', num2str(classifier.HyperparameterOptimizationResults.MinObjective));
    [label,~] = predict(classifier,predictors(test_id,:));
    total = cellfun(@strcmp, response(test_id), label);
    hits = total(total==1);
    accuracy = size(hits,1)/size(total,1);
    fprintf('Accuracy in test data: %s%%\n', num2str(accuracy*100));
    disp(classifier.ModelParameters);
    
    %   Save results
    row = size(results,1)+1;
    results{row,1} = classifier;
    results{row,2} = accuracy*100;
    save(file,'results');
end